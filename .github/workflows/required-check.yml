name: Required Check

permissions:
  contents: write
  pull-requests: write
  issues: write
  actions: write
  statuses: write
  checks: write

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Name for the new branch (optional)'
        required: false
        default: ''
      pr_title:
        description: 'Title for the PR (optional)'
        required: false
        default: 'Test PR from workflow_dispatch'
      pr_number:
        description: 'PR number to update status for'
        required: false
        default: ''
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  create-pr-and-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Generate branch name
      id: branch
      run: |
        if [ -n "${{ github.event.inputs.branch_name }}" ]; then
          BRANCH_NAME="${{ github.event.inputs.branch_name }}"
        else
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="test-branch-${TIMESTAMP}"
        fi
        echo "name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
        echo "Generated branch name: ${BRANCH_NAME}"
    
    - name: Create new branch
      run: |
        git checkout -b ${{ steps.branch.outputs.name }}
        echo "Branch created: ${{ steps.branch.outputs.name }}"
    
    - name: Make a test change
      run: |
        echo "# Test Change" >> test-file.md
        echo "This file was created by workflow_dispatch on $(date)" >> test-file.md
        echo "Branch: ${{ steps.branch.outputs.name }}" >> test-file.md
        echo "Triggered by: ${{ github.actor }}" >> test-file.md
        echo "Run ID: ${{ github.run_id }}" >> test-file.md
        # git add test-file.md
        # git commit -m "Add test file from workflow_dispatch"
    
    - name: Push branch
      run: |
        git push origin ${{ steps.branch.outputs.name }}
    
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      id: cpr
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.branch.outputs.name }}
        base: main
        title: ${{ github.event.inputs.pr_title || format('Test PR from workflow_dispatch - {0}', steps.branch.outputs.name) }}
        body: |
          This PR was created automatically by workflow_dispatch.

          **Details:**
          - Branch: `${{ steps.branch.outputs.name }}`
          - Triggered by: @${{ github.actor }}
          - Workflow run: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - Timestamp: ${{ github.event.repository.updated_at }}

          This PR should trigger the required checks for merging to main.
        labels: |
          automated
          workflow-dispatch
        assignees: ${{ github.actor }}
        reviewers: ${{ github.actor }}
        draft: false
        delete-branch: true

    - name: Check PR creation result
      run: |
        echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
        echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"
        echo "Branch created: ${{ steps.branch.outputs.name }}"

    - name: Trigger workflow_dispatch on new branch
      if: steps.cpr.outputs.pull-request-number != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Triggering workflow_dispatch to run checks on branch: ${{ steps.branch.outputs.name }}"

        # Trigger workflow with PR number as input
        gh workflow run required-check.yml \
          --ref ${{ steps.branch.outputs.name }} \
          -f pr_number="${{ steps.cpr.outputs.pull-request-number }}"

        echo "‚úÖ workflow_dispatch triggered with PR number: ${{ steps.cpr.outputs.pull-request-number }}"

  required-check:
    name: Required Status Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create check run (pending)
      if: github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a check run that mimics exactly what GitHub does for PR events
        CHECK_RUN_ID=$(gh api repos/${{ github.repository }}/check-runs \
          --field name="Required Status Check" \
          --field head_sha="${{ github.sha }}" \
          --field status="in_progress" \
          --field started_at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --field details_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --field external_id="${{ github.run_id }}" \
          --field output[title]="Required Status Check" \
          --field output[summary]="Running required checks..." \
          --jq '.id')

        echo "CHECK_RUN_ID=$CHECK_RUN_ID" >> $GITHUB_ENV
        echo "Created check run: $CHECK_RUN_ID"

    - name: Run required check
      run: |
        echo "Running required check..."
        echo "Event: ${{ github.event_name }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "SHA: ${{ github.sha }}"
        echo "PR Number: ${{ github.event.inputs.pr_number }}"

        # Simulate some test work
        sleep 10

        echo "‚úÖ Required check passed!"

    - name: Validate branch attribution
      if: github.event_name == 'pull_request'
      run: |
        echo "Validating branch attribution..."
        echo "PR Head Ref: ${{ github.head_ref }}"
        echo "PR Base Ref: ${{ github.base_ref }}"
        echo "PR Number: ${{ github.event.number }}"
        echo "‚úÖ Branch attribution validated!"

    - name: Update check run (completed)
      if: always() && github.event_name == 'workflow_dispatch' && github.event.inputs.pr_number != '' && env.CHECK_RUN_ID != ''
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Determine conclusion based on job outcome
        if [ "${{ job.status }}" == "success" ]; then
          CONCLUSION="success"
          TITLE="‚úÖ Required check passed"
          SUMMARY="All required checks completed successfully."
        else
          CONCLUSION="failure"
          TITLE="‚ùå Required check failed"
          SUMMARY="Required checks failed. Please review the logs."
        fi

        # Update the check run to completed (mimics exactly what GitHub does)
        gh api repos/${{ github.repository }}/check-runs/${{ env.CHECK_RUN_ID }} \
          --method PATCH \
          --field status="completed" \
          --field conclusion="$CONCLUSION" \
          --field completed_at="$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
          --field output[title]="$TITLE" \
          --field output[summary]="$SUMMARY" \
          --field details_url="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

        echo "Updated check run ${{ env.CHECK_RUN_ID }} to: $CONCLUSION"
